package clients.avro;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ColorAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9199170556291952585L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ColorAvro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The 'name' of the color\"},{\"name\":\"opacity\",\"type\":\"float\",\"doc\":\"The opacity of the color\",\"default\":1.0},{\"name\":\"brightness\",\"type\":\"int\",\"doc\":\"The brightness of the color\",\"default\":100},{\"name\":\"tint\",\"type\":\"int\",\"doc\":\"The tint of the color\",\"default\":100},{\"name\":\"saturation\",\"type\":\"int\",\"doc\":\"The saturation of the color\",\"default\":100}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ColorAvro> ENCODER =
      new BinaryMessageEncoder<ColorAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ColorAvro> DECODER =
      new BinaryMessageDecoder<ColorAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ColorAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ColorAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ColorAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ColorAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ColorAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ColorAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ColorAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ColorAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The 'name' of the color */
   private java.lang.CharSequence name;
  /** The opacity of the color */
   private float opacity;
  /** The brightness of the color */
   private int brightness;
  /** The tint of the color */
   private int tint;
  /** The saturation of the color */
   private int saturation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ColorAvro() {}

  /**
   * All-args constructor.
   * @param name The 'name' of the color
   * @param opacity The opacity of the color
   * @param brightness The brightness of the color
   * @param tint The tint of the color
   * @param saturation The saturation of the color
   */
  public ColorAvro(java.lang.CharSequence name, java.lang.Float opacity, java.lang.Integer brightness, java.lang.Integer tint, java.lang.Integer saturation) {
    this.name = name;
    this.opacity = opacity;
    this.brightness = brightness;
    this.tint = tint;
    this.saturation = saturation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return opacity;
    case 2: return brightness;
    case 3: return tint;
    case 4: return saturation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: opacity = (java.lang.Float)value$; break;
    case 2: brightness = (java.lang.Integer)value$; break;
    case 3: tint = (java.lang.Integer)value$; break;
    case 4: saturation = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The 'name' of the color
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * The 'name' of the color
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'opacity' field.
   * @return The opacity of the color
   */
  public float getOpacity() {
    return opacity;
  }


  /**
   * Sets the value of the 'opacity' field.
   * The opacity of the color
   * @param value the value to set.
   */
  public void setOpacity(float value) {
    this.opacity = value;
  }

  /**
   * Gets the value of the 'brightness' field.
   * @return The brightness of the color
   */
  public int getBrightness() {
    return brightness;
  }


  /**
   * Sets the value of the 'brightness' field.
   * The brightness of the color
   * @param value the value to set.
   */
  public void setBrightness(int value) {
    this.brightness = value;
  }

  /**
   * Gets the value of the 'tint' field.
   * @return The tint of the color
   */
  public int getTint() {
    return tint;
  }


  /**
   * Sets the value of the 'tint' field.
   * The tint of the color
   * @param value the value to set.
   */
  public void setTint(int value) {
    this.tint = value;
  }

  /**
   * Gets the value of the 'saturation' field.
   * @return The saturation of the color
   */
  public int getSaturation() {
    return saturation;
  }


  /**
   * Sets the value of the 'saturation' field.
   * The saturation of the color
   * @param value the value to set.
   */
  public void setSaturation(int value) {
    this.saturation = value;
  }

  /**
   * Creates a new ColorAvro RecordBuilder.
   * @return A new ColorAvro RecordBuilder
   */
  public static ColorAvro.Builder newBuilder() {
    return new ColorAvro.Builder();
  }

  /**
   * Creates a new ColorAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ColorAvro RecordBuilder
   */
  public static ColorAvro.Builder newBuilder(ColorAvro.Builder other) {
    if (other == null) {
      return new ColorAvro.Builder();
    } else {
      return new ColorAvro.Builder(other);
    }
  }

  /**
   * Creates a new ColorAvro RecordBuilder by copying an existing ColorAvro instance.
   * @param other The existing instance to copy.
   * @return A new ColorAvro RecordBuilder
   */
  public static ColorAvro.Builder newBuilder(ColorAvro other) {
    if (other == null) {
      return new ColorAvro.Builder();
    } else {
      return new ColorAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for ColorAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ColorAvro>
    implements org.apache.avro.data.RecordBuilder<ColorAvro> {

    /** The 'name' of the color */
    private java.lang.CharSequence name;
    /** The opacity of the color */
    private float opacity;
    /** The brightness of the color */
    private int brightness;
    /** The tint of the color */
    private int tint;
    /** The saturation of the color */
    private int saturation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ColorAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.opacity)) {
        this.opacity = data().deepCopy(fields()[1].schema(), other.opacity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.brightness)) {
        this.brightness = data().deepCopy(fields()[2].schema(), other.brightness);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tint)) {
        this.tint = data().deepCopy(fields()[3].schema(), other.tint);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.saturation)) {
        this.saturation = data().deepCopy(fields()[4].schema(), other.saturation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ColorAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(ColorAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.opacity)) {
        this.opacity = data().deepCopy(fields()[1].schema(), other.opacity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.brightness)) {
        this.brightness = data().deepCopy(fields()[2].schema(), other.brightness);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tint)) {
        this.tint = data().deepCopy(fields()[3].schema(), other.tint);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.saturation)) {
        this.saturation = data().deepCopy(fields()[4].schema(), other.saturation);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * The 'name' of the color
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * The 'name' of the color
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ColorAvro.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The 'name' of the color
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * The 'name' of the color
      * @return This builder.
      */
    public ColorAvro.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'opacity' field.
      * The opacity of the color
      * @return The value.
      */
    public float getOpacity() {
      return opacity;
    }


    /**
      * Sets the value of the 'opacity' field.
      * The opacity of the color
      * @param value The value of 'opacity'.
      * @return This builder.
      */
    public ColorAvro.Builder setOpacity(float value) {
      validate(fields()[1], value);
      this.opacity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'opacity' field has been set.
      * The opacity of the color
      * @return True if the 'opacity' field has been set, false otherwise.
      */
    public boolean hasOpacity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'opacity' field.
      * The opacity of the color
      * @return This builder.
      */
    public ColorAvro.Builder clearOpacity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'brightness' field.
      * The brightness of the color
      * @return The value.
      */
    public int getBrightness() {
      return brightness;
    }


    /**
      * Sets the value of the 'brightness' field.
      * The brightness of the color
      * @param value The value of 'brightness'.
      * @return This builder.
      */
    public ColorAvro.Builder setBrightness(int value) {
      validate(fields()[2], value);
      this.brightness = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'brightness' field has been set.
      * The brightness of the color
      * @return True if the 'brightness' field has been set, false otherwise.
      */
    public boolean hasBrightness() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'brightness' field.
      * The brightness of the color
      * @return This builder.
      */
    public ColorAvro.Builder clearBrightness() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tint' field.
      * The tint of the color
      * @return The value.
      */
    public int getTint() {
      return tint;
    }


    /**
      * Sets the value of the 'tint' field.
      * The tint of the color
      * @param value The value of 'tint'.
      * @return This builder.
      */
    public ColorAvro.Builder setTint(int value) {
      validate(fields()[3], value);
      this.tint = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tint' field has been set.
      * The tint of the color
      * @return True if the 'tint' field has been set, false otherwise.
      */
    public boolean hasTint() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tint' field.
      * The tint of the color
      * @return This builder.
      */
    public ColorAvro.Builder clearTint() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'saturation' field.
      * The saturation of the color
      * @return The value.
      */
    public int getSaturation() {
      return saturation;
    }


    /**
      * Sets the value of the 'saturation' field.
      * The saturation of the color
      * @param value The value of 'saturation'.
      * @return This builder.
      */
    public ColorAvro.Builder setSaturation(int value) {
      validate(fields()[4], value);
      this.saturation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'saturation' field has been set.
      * The saturation of the color
      * @return True if the 'saturation' field has been set, false otherwise.
      */
    public boolean hasSaturation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'saturation' field.
      * The saturation of the color
      * @return This builder.
      */
    public ColorAvro.Builder clearSaturation() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ColorAvro build() {
      try {
        ColorAvro record = new ColorAvro();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.opacity = fieldSetFlags()[1] ? this.opacity : (java.lang.Float) defaultValue(fields()[1]);
        record.brightness = fieldSetFlags()[2] ? this.brightness : (java.lang.Integer) defaultValue(fields()[2]);
        record.tint = fieldSetFlags()[3] ? this.tint : (java.lang.Integer) defaultValue(fields()[3]);
        record.saturation = fieldSetFlags()[4] ? this.saturation : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ColorAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<ColorAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ColorAvro>
    READER$ = (org.apache.avro.io.DatumReader<ColorAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeFloat(this.opacity);

    out.writeInt(this.brightness);

    out.writeInt(this.tint);

    out.writeInt(this.saturation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.opacity = in.readFloat();

      this.brightness = in.readInt();

      this.tint = in.readInt();

      this.saturation = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.opacity = in.readFloat();
          break;

        case 2:
          this.brightness = in.readInt();
          break;

        case 3:
          this.tint = in.readInt();
          break;

        case 4:
          this.saturation = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










